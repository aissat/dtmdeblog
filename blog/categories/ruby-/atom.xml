<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby, | مدونة الطيب الضادي]]></title>
  <link href="http://tayeb83.github.com/dtmdeblog/blog/categories/ruby-/atom.xml" rel="self"/>
  <link href="http://tayeb83.github.com/dtmdeblog/"/>
  <updated>2013-07-06T01:41:33+02:00</updated>
  <id>http://tayeb83.github.com/dtmdeblog/</id>
  <author>
    <name><![CDATA[طيب مرابطي]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[التعابير النمطية و روبي - الجزء الثاني]]></title>
    <link href="http://tayeb83.github.com/dtmdeblog/blog/2013/06/10/regexp-ruby-p2/"/>
    <updated>2013-06-10T19:49:00+02:00</updated>
    <id>http://tayeb83.github.com/dtmdeblog/blog/2013/06/10/regexp-ruby-p2</id>
    <content type="html"><![CDATA[<p>هذا المقال هو تكملة للمقال السابق الذي بدأته حول التعابير النمطية في روبي. في هذا المقال سأبدأ بتكملة الأمثلة التي بدأتها سابقا ثم أنتقل إلى طريقة البحث و الاستبدال.</p>

<h2>تكملة  الأمثلة</h2>

<h2>التكرار الجشع : </h2>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/regexp_ruby/repetition_gourmande.png" title="ruby_Regexp_gorumande"/></p>

<h2>التجميع بواسطة الحاضنتين :</h2>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/regexp_ruby/group_parentese.png" title="ruby_Regexp_grouping"/></p>

<h2>البدائل :</h2>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/regexp_ruby/replacement.png" title="ruby_Regexp_replacement"/></p>

<h2>المراسي anchors :</h2>

<p>المراسي عبارة عن أحرف أو بالأحرى رموز تساعد في حصر موقع التعبير النمطي :</p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/regexp_ruby/anchor.png" title="ruby_Regexp_anchor"/></p>

<h2>البحث و الاستبدال :</h2>

<p>من أهم الطرق أو العمليات الخاصة بالسلاسل في روبي العمليتين  sub و gsub. هاتين العمليتين تقومان بالبحث و الاستبدال على سلاسل الحروف باستعمال التعابير النمطية. أين sub تستبدل الحدوث الأول بينما gsub تستبدل كل الحوادث داخل السلسلة، لنأخذ أمثلة على ذلك :</p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/regexp_ruby/example_sub_gsub_1.png" title="ruby_Regexp_gsub1"/></p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/regexp_ruby/results_sub_gsub_1.png" title="ruby_Regexp_gsub1_result"/></p>

<p>في المثال الأول النتيجة موضحة في الصورة المرفقة أين قمنا بحذف التعليقات بالsub  بينما قمنا بحذف كل مل هو حرف ماعدا  الأرقام بواسطة gsub.</p>

<p>في المثال الثاني و بطريقتين مختلفتين باستعمال gsub فقط،  قمنابتكبير الحرف الأول من  كلمة tayeb إلى Tayeb.</p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/regexp_ruby/example_sub_gsub_2.png" title="ruby_Regexp_gsub_2"/></p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/regexp_ruby/result_sub_gsub_2.png" title="ruby_Regexp_gsub2_result"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[التعابير النمطية و روبي - الجزء الأول]]></title>
    <link href="http://tayeb83.github.com/dtmdeblog/blog/2013/05/21/regexp-ruby/"/>
    <updated>2013-05-21T21:44:00+02:00</updated>
    <id>http://tayeb83.github.com/dtmdeblog/blog/2013/05/21/regexp-ruby</id>
    <content type="html"><![CDATA[<p>هل حلمتم يوما بتعلم الصينية؟ ممتاز في هذا المقال سوف أعلمكم شيئا يشبهها, أي أنه يمكنكم كتابة شيء مثل هذا :</p>

<pre><code>        (((https?|ftp)://(w{3}\.)?)(?&lt;!www)(\w+-?)*\.([a-z]{2,4}))
</code></pre>

<p>هذا ما نسميه  التعابير النمطية أو  regular expression.
التعابير النمطية عبارة  عن نظام قوي و سريع للبحث عل سلسلة معينة من الحروف داخل سلاسل كبيرة (جملة، نصوص...)، أو بعبارة أخرى هو استعمال وظيفة ابحث/استبدل  بطريقة جد متطورة و التي لا يمكنكم التخلي عنها فور تعلمها و استعمالها.
فالتعابير النمطية سوف تسمح لنا بالبحث و الاستبدال داخل الجُمل و النصوص بطريقة فعالة  وسريعة  في نفس الوقت، و هذه بعض الأمثلة مما يمكن أن نفعله  باستعمالها :</p>

<ul>
<li><p>التأكد من أن البريد الإلكتروني الذي تم ادخاله من طرف المستخدم  صحيح الشكل مثل : tayeb@gmail.com.</p></li>
<li><p>تبديل شكل كتابة التاريخ  من الطريقة  الأمريكية  (2010-05-08) إلى الطريقة  الأوروبية مثلا (05/8/2012).</p></li>
<li><p>القيام  بعملية  بحث و استبدال معقدة داخل نص كبير.</p></li>
</ul>


<p>و هلم جر من العمليات المعقدة  التي يمكن القيام بها على النصوص أو الصفحات و التي لا تعد و لا تحصى.
الشيء الجميل الذي يمكن البدأ به هو أن كل لغات البرمجة (على كل حال التي أعرفها ) لا تحتاج لتفعيل أي مكتبة أو برنامج خاص للعمل بالتعابير النمطية و هذا لكثرة استعمالاتها.
في هذا المقال و إن كنت مُحبًا لperl في التعامل مع التعابير النمطية، سوف أركز على ruby تماشيا مع نمط المدونة و باعتبارها لغة تشبه perl في العديد من المواصفات  و التي من بينها التعابير النمطية.</p>

<h2>التركيب :</h2>

<p>داخل روبي التعبيرات النمطية لها الشكل التالي :</p>

<pre><code>                            /pattern/modifiers
</code></pre>

<p>بحيث تعبر  pattern عن التعبير و modifiers عن متغيرات نمط الربط. فيما يخص هذه الأخيرة  فإن روبي يدعم المتغيرات التالية :</p>

<ul>
<li><p>"i" تجاهل حالة الأحرف عند مطابقة النصوص</p></li>
<li><p>"o" يقوم بالربط مرة واحدة فقط</p></li>
<li><p>"x" تجاهل الفضاءات الخالية</p></li>
<li><p>"m" يسمح بالربط على مجموعة من السطور بحيث أن الرجوع إلى السطر يعتبره حرفا من الحروف.</p></li>
</ul>


<p>بالاضافة  إلى انه يمكننا مزج  العديد من هذه المتغيرات مع تعبير نمطي واحد، فمثلا لتجاهل حالة  الأحرف و الفضاءات الخالية نمزج المتغيرين التاليين : ix/.</p>

<h2>نماذج التعابير النمطية في روبي :</h2>

<p>باستثناء أحرف التحكم (+ ? . * ^ $ ( ) [ ] { } | ) ، كل حرف يطابق نفسه، كما أنه يمكن الغاء خاصية  التحكم في الحروف باستعمال الخط المائل العكسي backslash "\".
هذه اهم تركيبات التعابير النمطية الموجودة  داخل روبي :</p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/regexp_ruby/ruby_Regexp.png" title="ruby_Regexp"/></p>

<h2>أمثلة التعابير النمطية :</h2>

<h2>ربط الأحرف و الأرقام  :</h2>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/regexp_ruby/caracter_class.png" title="rubyversion"/></p>

<h2>حالات التكرار :</h2>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/regexp_ruby/reptetive_case.png" title="rubyversion"/></p>

<p>في الجزء الثاني إن شاءالله، سأكمل الامثلة المتداولة و سوف أعرض لكم طريقة البحث و الاستبدال بواسطة روبي و التعابير النمطية.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[مدخل إلى روبي]]></title>
    <link href="http://tayeb83.github.com/dtmdeblog/blog/2013/05/08/intro-ruby/"/>
    <updated>2013-05-08T18:29:00+02:00</updated>
    <id>http://tayeb83.github.com/dtmdeblog/blog/2013/05/08/intro-ruby</id>
    <content type="html"><![CDATA[<h2>نبذة عامة  عن روبي :</h2>

<p>كان أول ظهور لRuby سنة 1995 بفضل مطوره Yukihiro Matsumoto، جامعي ياباني، مما جعل هذه اللغة أكثر شهرة في اليابان من Perl أو Python. يأخذ Ruby تركيبه من لغات مختلفة : الجانب البراغماتي من Perl، التوجه الكائني من الSmaltalk ، و الوضوح من الPython. أما عن أصل التسمية فهذا يرجع لكون Ruby يقتبس أفكارا كثيرة من Perl، لهذا فإن المطورين في Perl لن يجدو صعوبة كبيرة  في تعلم هذه اللغة.</p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/ruby/YukihiroMatsumoto.JPG" title="Matz"/></p>

<h2>تثبيت و تجربة روبي :</h2>

<p>الطريقة الأمثل لتعلم لغة جديدة هو استعمالها و لاستعمالها فلا بد من تثبيتها. روبي متوفر في كل الأنظمة (linux/unix، Windows، Mac OS X، OS/2...). النسخة الثابتة الحالية لروبي هي النسخة ١.٩.٣ و إن كانت النسخة ٢.٠.٠ قد ظهرت من بضعة أيام.
على الWindows النسخة يمكن تحمليها من الموقع <a href="http://rubyinstaller.org/downloads">http://rubyinstaller.org/downloads</a> . في لينوكس، روبي متوفر الآن في شكل حزم لأغلبية التوزيعات في حالة عدم توفره للتوزيعة الخاصة بكم يمكنكم تحمليه و تثبيته "يدويا" من الموقع    <a href="www.ruby-lang.org">www.ruby-lang.org</a> باستعمال الطريقة المعتادة : "make; make install". بالنسبة للMac فإنه وبعد النسخة ١٠.٤ فهو يحوي روبي داخل حزمة أدوات التطوير  (development kit ).</p>

<h2>الخطوات الأولى :</h2>

<p>لتجاربنا الأولية سوف نستعمل برنامج من أهم البرامج الروبية وهو الIRB لInteractive Ruby ، لنفرض أنكم قمتم و بجدارة بتثبيت روبي، يمكنكم التأكد من النسخة التي قمتم بتثبيتها عن طريق الأمر :</p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/ruby/rubyVersion.png" title="rubyversion"/></p>

<p>نفس الشيء بالنسبة لIRB :</p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/ruby/irbVersion.png" title="irbversion"/></p>

<p>يمكنكم الإقلاع الآن، لنبدأ بكتابة المثال التالي على المحرر الذي تريدون كما في الصورة، بعدها احفظوه  باسم example.rb مثلا.</p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/ruby/exampleRuby.png" title="exampleRuby"/></p>

<p>بعدها افتحوا الterminal على مكان الملف و قومو بارسال الأمر ruby example.rb النتيجة توضحها الصورة :</p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/ruby/examplerubyexecution.png" title="executeRubyversion"/></p>

<p>هذا المثال جد بسيط لكل من له بعض المفاهيم في البرمجة، لهذا فهو لا يحتاج لشرح مفصل و لكننا سنشرح فقط ما قمنا به من الجانب البرمجي، في السطر الثالث استعملنا الوظيفة print التي تسمح بطباعة النص على الشاشة، هذه الوظيفة تستقبل وسيطا واحدا و هو عبارة عن سلسلة محارف بين علامتي التنصيص "". في السطر الرابع، البرنامج ينتظر الإجابة على السؤال ا لمطروح سابقا و الذي هو اسم المستخدم، لهذا الغرض نستعمل الوظيفة readline و التي لها دور القراءة على جهاز الإدخال القياسي (STDIN) إلى أن نقوم بالضغط على المفتاح ENTER، النتيجة ستحفظ داخل المتغير name. الآن المتغير سيحتوي على الإسم و علامة الرجوع إلى السطر" n\"، لهذا قمنا باستعمال chomp قبل الطبع لحذف العودة إلى السطر.</p>

<h2>أين تجدون المساعدة :</h2>

<p>لعل التوثيق هو أكبر مشكل في روبي و ماعدا الموجود في المكتبة الرئيسية سوف ترون بأنفسكم أنه مشكل لديه حل وحيد و هو قراءة الأمثلة المرفقة و في بعض الأحيان قراءة مصدر الحزم.
عندما قمتم بتثبيت روبي فقد قمتم بتثبيت RI : Ruby Interactive Reference. البحث يواسطة هذا البرنامج سهل، بحيث أنه يلزمكم فقط طلبه مرفقا بالنص الذي تريدون البحث عليه. مثلا، لو أردتم البحث على التوثيق الخاص بالArray، فإنه يجب ارسال الأمر كالتالي : ri Array، و سوف تحصلون على ما تريدونه.</p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/ruby/arrayhelp.png" title="arrayHelp"/></p>

<h2>قبل الذهاب بعيدا :</h2>

<p>في الأخير إليكم بعض الموارد التي يمكن مطالعتها و اللجوء إليها لتعلم المزيد عن هذه اللغة :</p>

<ol>
<li><a href="http://www.ruby-lang.org">http://www.ruby-lang.org</a></li>
<li><a href="http://raa.ruby-lang.org">http://raa.ruby-lang.org</a></li>
<li><a href="http://rubyforge.org">http://rubyforge.org</a></li>
<li><a href="https://www.ruby-toolbox.com">https://www.ruby-toolbox.com</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[من البداية]]></title>
    <link href="http://tayeb83.github.com/dtmdeblog/blog/2012/12/10/staticpageinrails/"/>
    <updated>2012-12-10T23:09:00+01:00</updated>
    <id>http://tayeb83.github.com/dtmdeblog/blog/2012/12/10/staticpageinrails</id>
    <content type="html"><![CDATA[<p>بعد غياب طويل نظرا لإنشغالاتي الكثيرة, أعود إليكم لمواصلة دروسنا الرايلزية. في هذا الدرس سوف نبدأ بمشروع جديد أحاول من خلاله شرح أهم ما يمكن معرفته لإنجاح أول مشروع ب ROR.
رغم أن الهدف من  روبي رايلز هو تصميم مواقع و تطبيقات ويب ديناميكية فإن رايلز بارع في إنشاء صفحات ويب ساكنة. إستعمال ROR لتصميم مواقع ويب ساكنة له فوائد كثيرة بحيث أنه يمكننا إضافة و لو قليلا بعض الكود ديناميكي.
في البداية و كما أوضحناه في درس سابق نقوم بإنشاء أول مشروع رايلز نسميه testproject كالتالي :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails new testproject $</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/StaticPagesRails/railsNewTestproject.png" title="إنشاء مشروع على رايلز"/></p>

<p>يمكن التنويه أنه في الإصدارات السابقة لرايلز كان لابد القيام بالأمر bundle install بعد إنشاء المشروع و لكن مع rails 3.2 أصبحت هذه الخطوة آلية عند المشروع, نُذكر أن الهدف من هذه الخطوة هو تثبيث الجيمات التي يحتاجها المشروع.</p>

<h2>  الصفحات الساكنة</h2>

<p>رايلز يقترح  طريقتين لإنشاء صفحات ويب ساكنة, الأولى بإستعمال صفحات ويب تحتوي على مجرد  الكود HTML, و الثانية, رايلز يتيح لنا تطوير واجهات (views) تحتوي على الHTML و التي يقوم رايلز بتحويلها إلى خادم الشبكة (web server).</p>

<h2>الصفحات الساكنة الفعلية</h2>

<p>لاحظتم أنه عند تشغيل مشروع رايلز للمرة الأولى ظهور صفحة بداية إفتراضية عند الذهاب إلى الرابط : http://localhost:3000
<img src="http://tayeb83.github.com/dtmdeblog/images/StaticPagesRails/testprojectfirstpage.png" title=" صفحة البداية على رايلز"/></p>

<p>لمعرفة مصدر الصفحة يجب النظر إلى الملف public/index.html و الذي قام رايلز بإنشاءه بشكل إفتراضي, المهم أن رايلز يُرسل أي ملف في الpublic مباشرة على المتصفح, في حالة الملف
 الخاص index.html فإننا لن نحتاج لكتابة الإسم على الرابط لأن الإسم index.html يُعتبر ملف إفتراضي لصفحة البداية. إذن إذا فهمتم هذه الفقرة فإنه بإمكانكم الآن إنشاء صفحاتكم الخاصة ووضعها في الملف public, على سبيل المثال يمكننا إنشاء صفحة تحتوي على كلمة ترحيب.
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gedit public/marhaba.html $</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/StaticPagesRails/marhabaContent.png" title="marhaba.html محتوى"/></p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/StaticPagesRails/marhabaPage.png" title=" إظهار الصفحة الترحيبية على السرفير"/></p>

<h2>الصفحات الساكنة الرايلزية </h2>

<p>القدرة على التعامل مع صفحات الHTML الساكنة ضروري ولكنه غير كافي بالدرجة الأولى خاصة من أجل إنشاء تطبيقات ديناميكية. في هذه الفقرة سوف نقوم بخطوة مهمة تسمح لنا بإنشاء صفحات ديناميكية و ذلك بإنشاء مانسميه مجموعة من "الأفعال" أو actions بحيث نستطيع من خلالهم تعريف الروابط بطريقة أقوى من الصفحات الساكنة. رايلز يتوفر على محرك يسمح بإنشاء وحدات التحكم "controller" إسمه "generate", كل ما يلزمه لذلك هو إسم وحدة التحكم. في مثالنا سوف نقوم بإنشاء وحدة التحكم من أجل صفحاتنا الساكنة و التي سنسميها safahates. والتي سوف تحتوي على "الأفعال" التي سوف تمثل صفحاتنا الساكنة مثل صفحة "البداية","الإتصال" أو صفحة "من نحن", و منه فإن السكريبت generate سوف يأخذ لائحة من الأفعال لإنشاء صفحاتنا.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails generate controller Safahates contact home $</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>مع إنشاء الفعلين home و contact فإن التوجيه نحو هاذين الفعلين قد تمت إضافته بطريقة آلية داخل الملف config/routes.rb.
<img src="http://tayeb83.github.com/dtmdeblog/images/StaticPagesRails/railsGenerateController.png" title="generate تسلسل الملفات التي أنشأت عن بواسطة السكريبت "/></p>

<p>لو أليقنا نظرة على الملف config/routes.rb سنلاحظ مثلا وجود العلاقة "get safahates/home", هذه العلاقة تتكفل بالأمر الموافق للرابط safahates/home لصفحة البداية, أكثر من ذلك, فإنه بإستعمالنا  لget فإن تطبيقنا يجيب على الأمر get و الذي هو عبارة عن واحد من الأفعال الأساسية للHTTP المستعملة من طرف HyperText Transfer Protocol. يمكنكم الآن مشاهدة النتيجة بإرسال اﻷمر rails server و تشغيل الرابط safahates/home. الآن لمعرفة منبع هذه الصفحات, يجب الذهاب إلى وحدة التحكم التي قمنا بإنشائها, سوف تلاحظون أن الملف safahates_controller يُعرف فئة تُسمى SahafatesController. الفئات هم عبارة عن طريقة سهلة و مرنة لترتيب الأفعال "الطرق" مثل الأفعال home  أو contact و التي تم تعريفها عن طريق الكلمة المفتاحية def, العلامة ">" تُشير إلى أن SahafatesController ترث من ApplicationController التي تعبر عن فئة رايلزية هذا يعني أن الفئة SahafatesController تحوي على الكثير من الميزات من رايلز. في روبي, هذه الأفعال لا تعني أي شيء بصفتها خالية, و لكن في رايلز الوضعية مختلفة : SahafatesController عبارة عن فئة روبية و لكن لكونها ترث من ApplicationController فإن سلوك هذه الأفعال ستكون خاصة برايلز, و لهذا عند تصفحنا الرابط safahates/home, يقوم رايلز بمراجعة وحدة التحكم safahates ثم بإرسال الأمر المقابل للفعل home ثم يرسل في الآخر الواجهة الموافقة. في المثال بماأن الفعل home خالي من أي أمر فإن كل الأوامر التي يتم إرسالها إلى safahates/home ترسل بدورها مجرد واجهات لا غير, و لكن أين هذه الواجهات ؟ الجواب موجود في الصورة السابقة التي تظهر نتيجة الأمر "rails generate Safahates contact home" و التي تظهر بكل وضوح الرابط  بين الواجهة ووحدة التحكم, فالفعل home يُقابله واجهة إسمها "home.html.erb" لاتحتوي على الكثير من الكود لإنها أُنشأت بطريقة إفتراضية.</p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/StaticPagesRails/RouteFile.png" title="config/routes.rb الملف "/></p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/StaticPagesRails/safahateHome.png" title="sahahates/home"/></p>

<h2> متغيرات الحالة و الروبي المتضمنن</h2>

<p>الملفات من نوع "erb." يمكن أن تحتوي على الكود روبي, و الذي يمكننا إستعماله لجعل الصفحات أكثر ديناميكية. دعونا نجرب بعض الأمور السهلة بروبي داخل الصفحة  home مثل إضافة "1+1" و نلاحظ النتيجة في المتصفح. لإدماج الكود روبي داخل الhtml هناك طريقتين :</p>

<ul>
<li><p>عن طريق العلامات &lt;% %> لتنفيذ الكود روبي الموجود بين هاتين العلامتين ؛</p></li>
<li><p>عن طريق  &lt;% =%> لتنفيذ الكود روبي و إظهار النتيجة مباشرة على المتصفح, بحيث أن الفرق مع الطريقة الأولى يكمن في إظهار النتيجة.
<img src="http://tayeb83.github.com/dtmdeblog/images/StaticPagesRails/rubyembeded.png" title="مثال عن الروبي المتضمنن"/></p></li>
</ul>


<p>أخر شيئ نتطرق له في هذا المقال هو مبدأ البرمجة من غير التكرار عن طريق الLayout. الملف application.html.erb الموجود فيapp/views/layout يعتبر من الملفات المهمة والتي تساعد بشكل كبير في تسريع البرمجة. الملف يحتوي على سطر في الظاهر بسيط ولكنه مفيد بدرجة كبيرة إنه :   &lt;% yield %> و الذي يسمح بإدخال أي واجهة, لهذا فإن الملف application.html.erb يستعمل بشكل كبير برسم الواجهة الأساسية لكل مشروع داخل رايلز, بحيث لو أن الصفحات داخل التطبيق تتقاسم بعض المحتوى فإن يمكن كتابتها مرة واحدة في هذا الLayout.</p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/StaticPagesRails/applicationlayout.png" title="application.html.erb الملف"/></p>
]]></content>
  </entry>
  
</feed>
